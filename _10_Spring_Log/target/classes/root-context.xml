<?xml version="1.0" encoding="UTF-8"?>
<!--필요한 엘리먼트들을 사용하기 위한 namesapce 추가하는 부분
xmlns:키워드 => 키워드로 엘리먼트를 생성한다.
xsi:schemaLocation에서 namespace를 사용하기 위한 설정파일인 xsd파일을 링크를 걸어줘야 namespace를 사용할 수 있는 상태가 된다.-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!--ContextLoaderListener 객체에서 사용하는 설정파일
        web.xml을 읽으면서 제일 먼저 불러오는 설정파일이다.
        프로젝트에서 전반적으로 사용되는 자원(DB커넥션, 트랜잭션처리, 파일업로드 등)을 생성하고 설정.
        bean 엘리먼트로 객체를 생성해서 스프링 컨테이너에 등록할 수 있는 설정도 할 수 있다.
    -->
    <!--root-context.xml, servlet-context.xml 파일을 읽어서 스프링 컨테이너를 구동할 때
        bean 엘리먼트로 등록되어 있는 클래스들은 객체로 자동 생성하여 bean객체로 등록한다.
        일반적으로 개발자가 작성한 클래스들은 설정파일에 bean 엘리먼트에 등록하지 않고
        라이브러리(jar파일)안에 있는 클래스들을 주로 bean 엘리먼트로 등록한다.
        개발자가 작성한 클래스들은 어노테이션을 달 수 있지만 jar 파일안에 있는 클래스들은
        개발자들이 수정할 수 없기 때문에 어노테이션을 달 수 없어서 설정 파일에
        bean 엘리먼트로 등록해서 객체를 생성하도록 한다.
        bean 엘리먼트나 어노테이션을 통해 생성되는 객체는 싱글톤 패턴을 하나의 객체를 공유해서
        사용하는 방식이다.
    -->
    <!--IOC(Inverse Of Controll, 제어의 역전): 개발자가 직접 하던 객체 생성, 의존성 주입 등을
                                              스프링 설정 파일을 통해 스프링프레임워크에 위임.
    -->
    <!--bean 엘리먼트에 등록된 클래스들은 스프링 컨테이너가 구동되면서 객체를 자동으로 생성한다.-->
    <!--init-mehtod: bean객체 생성시 동작할 메소드를 지정하는 속성-->
    <!--destroy-mehtod: bean객체 삭제시 동작할 메소드를 지정하는 속성-->
    <!--lazy-init: bean 객체의 생성 시점을 지정하는 속성. 기본값은 false로 스프링 컨테이너 구동시
                   객체 생성. true로 지정 시 DL 시에 객체가 생성된다.-->
    <!--scope: 객체 생성 방식 지정. 기본 값으로 singleton이 지정되어 하나의 객체만 생성해서
               공유해서 사용. prototype으로 지정 시 DL 시에 계속해서 객체 생성하고 스프링 컨테이너가
               생명주기를 관리할 수 없는 disposable bean으로 생성되기 때문에 destroy-method는 호출되지 않는다.-->
<!--    <bean id="kiaCar" class="com.bit.springboard.coupling.KiaCar"-->
<!--          init-method="initMethod" destroy-method="destroyMethod"-->
<!--          scope="prototype"-->
<!--    >-->
        <!--property: name 속성값으로 지정된 멤버변수의 setter 메소드를 통해 의존성 주입하는 엘리먼트-->
        <!--bean 객체 생성 직후에 setter 메소드를 호출해서 의존성을 주입한다.-->
<!--        <property name="color" value="blue"></property>-->
<!--        <property name="carAudio" ref="sonyCarAudio"></property>-->
<!--    </bean>-->
<!--    <bean id="hyundaiCar" class="com.bit.springboard.coupling.HyundaiCar"-->
<!--          init-method="initMethod" destroy-method="destroyMethod"-->
<!--          lazy-init="true"-->
<!--    >-->
<!--        &lt;!&ndash;constructor-arg: 생성자의 매개변수를 전달하는 엘리먼트-->
<!--                              일반적인 값을 매개변수로 전달할 때는 value 속성으로 지정-->
<!--                              bean 객체 타입의 값을 매개변수로 전달할 때는 ref 속성으로 지정&ndash;&gt;-->
<!--        &lt;!&ndash;constructor-arg 지정 개수 만큼 매개변수를 가지고 있는 생성자를 자동으로 호출한다.&ndash;&gt;-->
<!--        &lt;!&ndash;index 속성: 전달할 매개변수의 순서를 지정&ndash;&gt;-->
<!--        <constructor-arg index="1" value="red"></constructor-arg>-->
<!--        <constructor-arg index="0" ref="appleCarAudio"></constructor-arg>-->
<!--&lt;!&ndash;        <constructor-arg index="1" ref="appleCarAudio"></constructor-arg>&ndash;&gt;-->
<!--    </bean>-->

    <!--p namespace: property 엘리먼트를 간편하게 설정할 수 있는 네임스페이스.
                     bean 엘리먼트의 속성으로 property 엘리먼트를 지정할 수 있다.
                     p:변수명: 리터럴값으로 setter 메소드 실행
                     p:변수명-ref: bean 객체를 참조하여 setter 메소드 실행-->
<!--    <bean id="hyundaiCar" class="com.bit.springboard.coupling.HyundaiCar"-->
<!--          p:carAudio-ref="sonyCarAudio" p:color="blue"/>-->

<!--    <bean id="sonyCarAudio" class="com.bit.springboard.coupling.SonyCarAudio"></bean>-->
<!--    <bean id="appleCarAudio" class="com.bit.springboard.coupling.AppleCarAudio"></bean>-->
    <!--context:component-scan: 지정된 패키지의 class중 @Component, @Controller, @Service, @Repository 어노테이션이
                                 달려있는 클래스들을 자동으로 객체를 생성하여 bean 객체로 등록하는 엘리먼트
    -->
    <context:component-scan base-package="com.bit.springboard"/>


    <!--라이브러리(jar 파일)의 클래스에는 어노테이션을 달 수 없기때문에 bean 엘리먼트를 통해서
        bean 객체를 생성하고 등록한다.-->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/studydb?serverTimezone=UTC"/>
        <property name="username" value="study"/>
        <property name="password" value="!dkdlxl1234"/>
    </bean>









</beans>